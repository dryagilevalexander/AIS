// <auto-generated />
using System;
using Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20230323145838_editMyFile")]
    partial class editMyFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.ArticleOfLaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ArticleOfLaws");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "пункт 8 части 1 44-ФЗ (коммунальные услуги)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "часть 4 44-ФЗ (единственный поставщик)"
                        });
                });

            modelBuilder.Entity("Core.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MyContractStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NumberOfContract")
                        .HasColumnType("text");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectOfContract")
                        .HasColumnType("text");

                    b.Property<int>("TypeOfContract")
                        .HasColumnType("integer");

                    b.Property<string>("projectContractLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MyContractStatusId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Core.DirectorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DirectorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Директор"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Генеральный директор"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Глава"
                        });
                });

            modelBuilder.Entity("Core.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameOfTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOutput")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TemplateFileId")
                        .HasColumnType("integer");

                    b.Property<int>("Test")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfContractId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateFileId");

                    b.HasIndex("TypeOfContractId");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("Core.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Employeers");
                });

            modelBuilder.Entity("Core.LevelImportance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassView")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LevelImportances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassView = "btn btn-secondary",
                            Name = "Низкий"
                        },
                        new
                        {
                            Id = 2,
                            ClassView = "btn btn-warning",
                            Name = "Средний"
                        },
                        new
                        {
                            Id = 3,
                            ClassView = "btn btn-danger",
                            Name = "Высокий"
                        });
                });

            modelBuilder.Entity("Core.MyContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MyContractStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Подготовка"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Согласование"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Заключение"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Исполнение"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Завершен"
                        },
                        new
                        {
                            Id = 6,
                            Name = "В архиве"
                        });
                });

            modelBuilder.Entity("Core.MyFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MySubTaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameInServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("MySubTaskId");

                    b.HasIndex("MyTaskId");

                    b.ToTable("MyFiles");
                });

            modelBuilder.Entity("Core.MySubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MyTaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyTaskLevelImportanceId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyTaskStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MyTaskId");

                    b.HasIndex("MyTaskLevelImportanceId");

                    b.HasIndex("MyTaskStatusId");

                    b.ToTable("MySubTasks");
                });

            modelBuilder.Entity("Core.MyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DestinationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MyTaskLevelImportanceId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyTaskStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MyTaskLevelImportanceId");

                    b.HasIndex("MyTaskStatusId");

                    b.ToTable("MyTasks");
                });

            modelBuilder.Entity("Core.MyTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MyTaskStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Поступила"
                        },
                        new
                        {
                            Id = 2,
                            Name = "В работе"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Выполнено"
                        },
                        new
                        {
                            Id = 4,
                            Name = "В архиве"
                        });
                });

            modelBuilder.Entity("Core.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BIK")
                        .HasColumnType("text");

                    b.Property<string>("Bank")
                        .HasColumnType("text");

                    b.Property<string>("CorrespondentAccount")
                        .HasColumnType("text");

                    b.Property<string>("DirectorName")
                        .HasColumnType("text");

                    b.Property<int?>("DirectorTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("KPP")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OGRN")
                        .HasColumnType("text");

                    b.Property<int?>("PartnerStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("PartnerTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PassportDateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PassportDateOfIssue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportDivisionCode")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportPlaseOfIssue")
                        .HasColumnType("text");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectorTypeId");

                    b.HasIndex("PartnerStatusId");

                    b.HasIndex("PartnerTypeId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Core.PartnerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PartnerStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Головная"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Дочерняя"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Контрагент"
                        });
                });

            modelBuilder.Entity("Core.PartnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocumentTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.ToTable("PartnerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Юридическое лицо"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Индивидуальный предприниматель"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Физическое лицо"
                        });
                });

            modelBuilder.Entity("Core.TypeOfContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeOfContracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Договор подряда"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Договор оказания услуг"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Договор поставки"
                        });
                });

            modelBuilder.Entity("Core.TypeOfStateReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocumentTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.ToTable("TypeOfStateRegs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "44-ФЗ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "223-ФЗ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ГК РФ"
                        });
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserNickName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Contract", b =>
                {
                    b.HasOne("Core.MyContractStatus", "MyContractStatus")
                        .WithMany()
                        .HasForeignKey("MyContractStatusId");

                    b.HasOne("Core.Partner", "Partner")
                        .WithMany("Contracts")
                        .HasForeignKey("PartnerId");

                    b.Navigation("MyContractStatus");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Core.DocumentTemplate", b =>
                {
                    b.HasOne("Core.MyFile", "TemplateFile")
                        .WithMany()
                        .HasForeignKey("TemplateFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.TypeOfContract", "TypeOfContract")
                        .WithMany("DocumentTemplates")
                        .HasForeignKey("TypeOfContractId");

                    b.Navigation("TemplateFile");

                    b.Navigation("TypeOfContract");
                });

            modelBuilder.Entity("Core.Employee", b =>
                {
                    b.HasOne("Core.Partner", "Partner")
                        .WithMany("Employeers")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Core.MyFile", b =>
                {
                    b.HasOne("Core.Contract", "Contract")
                        .WithMany("MyFiles")
                        .HasForeignKey("ContractId");

                    b.HasOne("Core.MySubTask", "MySubTask")
                        .WithMany("MyFiles")
                        .HasForeignKey("MySubTaskId");

                    b.HasOne("Core.MyTask", "MyTask")
                        .WithMany("MyFiles")
                        .HasForeignKey("MyTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contract");

                    b.Navigation("MySubTask");

                    b.Navigation("MyTask");
                });

            modelBuilder.Entity("Core.MySubTask", b =>
                {
                    b.HasOne("Core.MyTask", "MyTask")
                        .WithMany("MySubTasks")
                        .HasForeignKey("MyTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.LevelImportance", "MyTaskLevelImportance")
                        .WithMany()
                        .HasForeignKey("MyTaskLevelImportanceId");

                    b.HasOne("Core.MyTaskStatus", "MyTaskStatus")
                        .WithMany()
                        .HasForeignKey("MyTaskStatusId");

                    b.Navigation("MyTask");

                    b.Navigation("MyTaskLevelImportance");

                    b.Navigation("MyTaskStatus");
                });

            modelBuilder.Entity("Core.MyTask", b =>
                {
                    b.HasOne("Core.LevelImportance", "MyTaskLevelImportance")
                        .WithMany()
                        .HasForeignKey("MyTaskLevelImportanceId");

                    b.HasOne("Core.MyTaskStatus", "MyTaskStatus")
                        .WithMany()
                        .HasForeignKey("MyTaskStatusId");

                    b.Navigation("MyTaskLevelImportance");

                    b.Navigation("MyTaskStatus");
                });

            modelBuilder.Entity("Core.Partner", b =>
                {
                    b.HasOne("Core.DirectorType", "DirectorType")
                        .WithMany()
                        .HasForeignKey("DirectorTypeId");

                    b.HasOne("Core.PartnerStatus", "PartnerStatus")
                        .WithMany()
                        .HasForeignKey("PartnerStatusId");

                    b.HasOne("Core.PartnerType", "PartnerType")
                        .WithMany()
                        .HasForeignKey("PartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectorType");

                    b.Navigation("PartnerStatus");

                    b.Navigation("PartnerType");
                });

            modelBuilder.Entity("Core.PartnerType", b =>
                {
                    b.HasOne("Core.DocumentTemplate", null)
                        .WithMany("PartnerTypes")
                        .HasForeignKey("DocumentTemplateId");
                });

            modelBuilder.Entity("Core.TypeOfStateReg", b =>
                {
                    b.HasOne("Core.DocumentTemplate", null)
                        .WithMany("TypeOfStateRegs")
                        .HasForeignKey("DocumentTemplateId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Contract", b =>
                {
                    b.Navigation("MyFiles");
                });

            modelBuilder.Entity("Core.DocumentTemplate", b =>
                {
                    b.Navigation("PartnerTypes");

                    b.Navigation("TypeOfStateRegs");
                });

            modelBuilder.Entity("Core.MySubTask", b =>
                {
                    b.Navigation("MyFiles");
                });

            modelBuilder.Entity("Core.MyTask", b =>
                {
                    b.Navigation("MyFiles");

                    b.Navigation("MySubTasks");
                });

            modelBuilder.Entity("Core.Partner", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Employeers");
                });

            modelBuilder.Entity("Core.TypeOfContract", b =>
                {
                    b.Navigation("DocumentTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
